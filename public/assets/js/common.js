$(document).ready(function () {

  $("body").on("click", "[data-type='loader']", function () {
    var $this = $(this);
    $this.button('loading');
    setTimeout(function () {
      $this.button('reset');
    }, 1000);
  });

  $("body").on("click", "[data-type='card-content']", function (e) {
    e.preventDefault();
    $(this).data('clicked', false);
    $(this).parents('.card').find('.card-body').toggle();
    $(this).parents('.card').find('.card-content').height(235);
    $(this).parents('.card').find('.card-content').toggleClass('d-none d-show');

    $('.tooltip').show();
    if ($(this).parents('.card').find('.card-content').hasClass('d-show')) {
      $(this).data('clicked', true);
      $('.tooltip').hide();
      $(this).parents('.card').find('form.card-form').submit();
    }
  });

  $("body").on("submit", ".card-form", function (e) {
    // $('.card-form').submit(function (e) {
    e.preventDefault();
    var $target = $(e.target);

    const formJson = JSON.stringify(Object.fromEntries(new FormData(this)));
    // console.log(formJson);

    var card_body = $target.parents('.card').find('.card-body');
    var content_height = card_body.height();
    $target.parents('.card').find('.card-content').height(580 - 20);
    $target.parents('.card').find('.card-content').html('<div class="d-flex align-items-center justify-content-center" style="height: ' + content_height + 'px;"><div class="spinner-grow spinner-border-lg text-secondary" role="status"><span class="visually-hidden">Loading...</span></div></div>');

    $.ajax({
      url: '/api/gaming/getDashboardPerUser',
      type: "POST",
      data: formJson,
      // dataType: 'json',
      contentType: 'application/json',
      processData: false,
      success: function (response) {
        // console.log(response);
        $target.parents('.card').find('.card-content').html(response);

        const cardEl = $target.parents('.card').find('.card-content').attr("id");
        scrollToAnchor(cardEl);
        const cardContent = document.getElementById(cardEl);
        if (cardContent) {
          new PerfectScrollbar(cardContent, {
            wheelPropagation: false
          });
        }
      },
      error: function (response) {
        console.log(response)
      }
    });
  });

  function scrollToAnchor(selector){
    const destination = $("#"+selector);
      $('html,body').animate({
        scrollTop: (destination.offset().top - 80)
      },'fast');
  }

  if ($('.flash-message').length) {
    setTimeout(function () {
      $('.flash-message .btn-close').click();
    }, 2800);
  }

  if ($('#getGenerateHits').length) {
    var date = $('#date').val();

    var hitsTable = $('#getGenerateHits').DataTable({
      destroy: true,
      pageLength: 10,
      autoWidth: false,
      bAutoWidth: false,
      ordering: false,
      "bFilter": true,
      "lengthChange": false,
      ajax: {
        "url": "/api/gaming/getGenerateHits?Date=" + date
      },
      columns: [{
        data: "userId",
        "visible": false
      },
      {
        data: "hitsId",
        title: "Hits Id"
      },
      {
        data: "date",
        title: "Date Register"
      },
      {
        data: "generatedId",
        title: "Transcode"
      },
      {
        data: "drawCategory",
        title: "Draw Category"
      },
      {
        data: "winCombination",
        title: "Win Combination"
      },
      {
        data: "amount",
        title: "Amount"
      },
      {
        data: "winAmount",
        title: "Win Amount"
      },
      {
        data: "generateBy",
        title: "Generated By"
      }
      ],
      columnDefs: [{
        targets: 2,
        render: DataTable.render.datetime('D MMM YYYY hh:mm A'),
      }]
    });
    hitsTable.on('xhr', function () {
      var data = hitsTable.ajax.json();

      $("#printReport").addClass('d-none');

      if (data.data.length != 0)
        $("#printReport").removeClass('d-none').addClass('d-block');
    });

    $("body").on("change", "#date", function (e) {
      var date_change = $(this).val();
      $('#getGenerateHits').DataTable().ajax.url("/api/gaming/getGenerateHits?Date=" + date_change).load();
    });

    const swalWithBootstrapButtons = Swal.mixin({
      customClass: {
        confirmButton: 'btn btn-danger mx-3',
        cancelButton: 'btn btn-secondary'
      },
      buttonsStyling: false
    });

    $('#form-module').submit(function (e) {
      var button = $(document.activeElement).val();
      if (button == 'report') {
        const formJson = JSON.stringify(Object.fromEntries(new FormData(this)));
        // console.log(formJson);

        // only for mobile
        if (Helpers.isMobileDevice()) {
          $(".layout-page .layout-navbar").hide();
          $(".no-print").hide();
          $("footer").hide();
          $(".ui-bg-overlay-container").removeClass('p-4');

          $("#wrapper-pdf").removeClass('d-none').addClass('d-block');
        }

        var title = document.title;
        document.title = "hits_" + new Date().toISOString().slice(0, 10);

        $.ajax({
          url: '/api/gaming/getReportHits',
          type: "POST",
          data: formJson,
          dataType: 'html',
          contentType: 'application/json',
          processData: false,
          success: function (response) {
            // console.log(response);
            if (response == '') {
              $("#printReport").addClass('d-none');
            } else {
              $(this).unbind();
              $(this).submit();
              $("#printReport").removeClass('d-none').addClass('d-block');
              $("#report-pdf").html(response);

              let focuser = setInterval(() => window.dispatchEvent(new Event('focus')), 500);

              setTimeout(function () {
                printJS({
                  printable: 'report-pdf',
                  type: 'html',
                  onPrintDialogClose: () => {
                    // only for mobile
                    clearInterval(focuser);
                    document.title = title;

                    if (Helpers.isMobileDevice()) {
                      $(".layout-page .layout-navbar").show();
                      $(".no-print").show();
                      $("footer").show();
                      $(".ui-bg-overlay-container").addClass('p-4');

                      $("#wrapper-pdf").addClass('d-none');
                    }
                  }
                });
              }, 500);
            }
          },
          error: function (response) {
            console.log(response)
          }
        });
      }
      else {
        swalWithBootstrapButtons.fire({
          title: 'Are you sure to reset hits?',
          icon: 'question',
          iconHtml: '?',
          confirmButtonText: 'Reset',
          cancelButtonText: 'Cancel',
          showCancelButton: true,
          showCloseButton: true
        }).then((result) => {
          if (result.isConfirmed) {
            $(this).unbind();
            $(this).submit();
          }
        });
      }

      e.preventDefault();
      var currentElement = $(this);

    });
  }

  if ($('#getBetCancel').length) {
    var datefrom = $('#datefrom').val();
    var dateto = $('#dateto').val();

    $('#getBetCancel').DataTable({
      destroy: true,
      pageLength: 10,
      autoWidth: false,
      bAutoWidth: false,
      ordering: false,
      "bFilter": true,
      "lengthChange": false,
      // lengthMenu: [
      //   [10, 20, 50, -1],
      //   [10, 20, 50, "All"]
      // ],
      ajax: {
        "url": "/api/gaming/getBetCancel?datefrom=" + datefrom + "&dateto=" + dateto
      },
      columns: [
        {
          data: "userId",
          "visible": false
        },
        {
          data: "transcode",
          title: "Transcode"
        },
        {
          data: "amount",
          title: "Amount"
        },
        {
          data: "dateCancelled",
          title: "Date Request"
        },
        // {
        //     data: "isCancelled",
        //     title: "Is Cancelled"
        // },
        {
          mRender: function (data, type, row) {
            return row['isCancelled']
              ? '<span class="badge bg-label-primary me-1">Cancelled</span>'
              : '<span class="badge bg-label-warning me-1">Pending</span>';
          }
        },
        {
          mRender: function (data, type, row) {
            if (!row['isCancelled']) {
              return '<a href="/cancel-bets/approve?generatedId=' + row['transcode'] + '" class="table-delete text-info btn-approve" title="Approve"><i class="bx bx-like"></i></a>';
            } else {
              return '';
            }
          }
        }
      ],
      columnDefs: [{
        targets: 3,
        render: DataTable.render.datetime('D MMM YYYY hh:mm A'),
      },
      {
        targets: 4,
        title: "Status",
      },
      ]
    });

    $("body").on("change", "#datefrom, #dateto", function (e) {
      var datefrom = $('#datefrom').val();
      var dateto = $('#dateto').val();
      $('#getBetCancel').DataTable().ajax.url("/api/gaming/getBetCancel?datefrom=" + datefrom + "&dateto=" + dateto).load();
    });

    const swalWithBootstrapButtons = Swal.mixin({
      customClass: {
        confirmButton: 'btn btn-info mx-3',
        cancelButton: 'btn btn-secondary'
      },
      buttonsStyling: false
    });

    $("body").on("click", ".btn-approve", function (e) {
      e.preventDefault();

      swalWithBootstrapButtons.fire({
        title: 'Are you sure to Approve this Cancel Bet?',
        icon: 'question',
        iconHtml: '?',
        confirmButtonText: 'Approve',
        cancelButtonText: 'Cancel',
        showCancelButton: true,
        showCloseButton: true
      }).then((result) => {
        if (result.isConfirmed) {
          window.location = $(this).attr('href');
        }
      });
    });
  }

  if ($('#getSoldOut').length) {
    var _type = $('#getSoldOut').attr("data-type");

    var column = [
      {
        data: "soldOutId",
        "visible": false
      },
      {
        data: "combination",
        title: "Number"
      },
      {
        data: "drawCategory",
        width: "250",
        title: "Category"
      },
      {
        data: "winrate",
        title: "Winrate"
      },

      {
        title: "Action",
        width: "250",
        mRender: function (data, type, row) {
          return '<a href="/sold-outs/delete?type=' + _type + '&soldOutId=' + row['soldOutId'] + '" class="table-delete text-danger btn-rmSoldOuts" title="Approve"><i class="bx bx-trash"></i></a>';
        }
      }
    ];
    if (_type == 'hot-number') {
      column = [
        {
          data: "hotNumberId",
          "visible": false
        },
        {
          data: "drawCategory",
          width: "250",
          title: "Category"
        },
        {
          data: "combination",
          title: "Number",
          width: "250",
          mRender: function (data, type, row) {
            return '<span class="comb-text" data-id="' + row['hotNumberId'] + '">' + row['combination'] + '</span>';
          }
        },
        {
          title: "Sales Limit",
          width: "250",
          mRender: function (data, type, row) {
            return '<span class="limit-text" data-id="' + row['hotNumberId'] + '">' + row['salesLimit'] + '</span>';
          }
        },
        {
          title: "Action",
          width: "250",
          mRender: function (data, type, row) {
            return '<a href="javascript:void(0);" class="table-delete text-primary btn-upSoldOuts" data-id="' + row['hotNumberId'] + '" data-cat="' + row['drawCategory'] + '" title="Edit"><i class="bx bx-pencil"></i></a>';
          },
          className: 'dt-body-center dt-head-center'
        }
      ];
    } else if (_type == 'draw-limit') {
      column = [
        {
          data: "salesId",
          "visible": false
        },
        {
          data: "drawCategory",
          width: "250",
          title: "Category"
        },
        {
          title: "Sales Limit",
          width: "250",
          mRender: function (data, type, row) {
            return '<span class="limit-text" data-id="' + row['salesId'] + '">' + row['salesLimit'] + '</span>';
          }
        },
        {
          title: "Action",
          width: "250",
          mRender: function (data, type, row) {
            return '<a href="javascript:void(0);" class="table-delete text-primary btn-upSoldOuts" data-id="' + row['salesId'] + '" title="Edit"><i class="bx bx-pencil"></i></a>';
          },
          className: 'dt-body-center dt-head-center'
        }
      ];
    } else if (_type == 'bet-limit') {
      column = [
        {
          data: "salesId",
          "visible": false
        },
        {
          data: "drawCategory",
          width: "250",
          title: "Category"
        },
        {
          title: "Bet Limit",
          width: "250",
          mRender: function (data, type, row) {
            return '<span class="limit-text" data-id="' + row['salesId'] + '">' + row['salesLimit'] + '</span>';
          }
        },
        {
          title: "Action",
          width: "250",
          mRender: function (data, type, row) {
            return '<a href="javascript:void(0);" class="table-delete text-primary btn-upSoldOuts" data-id="' + row['salesId'] + '" data-cat="' + row['drawCategory'] + '" title="Edit"><i class="bx bx-pencil"></i></a>';
          },
          className: 'dt-body-center dt-head-center'
        }
      ];
    }

    $('#getSoldOut').DataTable({
      destroy: true,
      pageLength: 10,
      autoWidth: false,
      bAutoWidth: false,
      ordering: false,
      "bFilter": true,
      "lengthChange": false,
      ajax: {
        "url": "/api/gaming/getSoldOut?type=" + _type
      },
      columns: column,
      columnDefs: [{
        targets: 0,
        render: DataTable.render.datetime('D MMM YYYY hh:mm A'),
      },
      {
        targets: 0,
        title: "Status",
      },
      ]
    });

    const swalWithBootstrapButtons = Swal.mixin({
      customClass: {
        confirmButton: 'btn btn-danger mx-3',
        cancelButton: 'btn btn-secondary'
      },
      buttonsStyling: false
    });

    $("body").on("click", ".btn-rmSoldOuts", function (e) {
      e.preventDefault();

      swalWithBootstrapButtons.fire({
        title: 'Are you sure to Delete this?',
        icon: 'question',
        iconHtml: '?',
        confirmButtonText: 'Delete',
        cancelButtonText: 'Cancel',
        showCancelButton: true,
        showCloseButton: true
      }).then((result) => {
        if (result.isConfirmed) {
          window.location = $(this).attr('href');
        }
      });
    });

    $("body").on("click", ".btn-upSoldOuts", function (e) {
      e.preventDefault();
      var data_id = $(this).data('id');
      var val = $('.limit-text[data-id="'+ data_id +'"]').text();
      var comb = $('.comb-text[data-id="'+ data_id +'"]').text();
      var cat = $(this).data('cat');
      if( _type == 'hot-number' )
      {
        $('.comb-text[data-id="'+ data_id +'"]').replaceWith('<input class="form-control" name="combination" type="number" oninput="javascript: if (this.value.length > this.maxLength) this.value = parseFloat(this.value.slice(0, this.maxLength));" maxlength="4" required="" value=\"' + comb + '\" data-id="'+ data_id +'" data-cat="'+ cat +'">');
      }
      $('.limit-text[data-id="'+ data_id +'"]').replaceWith('<input class="form-control" name="salesLimit" type="number" oninput="javascript: if (this.value.length > this.maxLength) this.value = parseFloat(this.value.slice(0, this.maxLength));" maxlength="20" required="" value=\"' + val + '\" data-id="'+ data_id +'" data-cat="'+ cat +'">');
      if( _type == 'hot-number' )
      {
        drawcategoryMax(cat);
        $('input[name="combination"][data-id="'+ data_id +'"]').focus();
        $('input[name="combination"][data-id="'+ data_id +'"]').select();
      }
      else
      {
        $('input[name="salesLimit"][data-id="'+ data_id +'"]').focus();
        $('input[name="salesLimit"][data-id="'+ data_id +'"]').select();
      }
    });

    $("body").on("blur", "[name=\"combination\"]", function (e) {
      $('input[name="salesLimit"]').focus();
      $('input[name="salesLimit"]').select();
    });

    $("body").on("blur", "[name=\"salesLimit\"]", function (e) {
      e.preventDefault();
      
      var data_id = $('[name="salesLimit"]').data("id");
      var val = $('[name="salesLimit"]').val();
      var comb = $('[name="combination"]').val();
      var cat = $('[name="salesLimit"]').data("cat");
      const formJson = {
        "salesId": data_id,
        "type": _type,
        "drawCategory": cat,
        "salesLimit": val,
        "combination": comb
      };

      $.ajax({
        url: '/api/gaming/sold-outs/update',
        type: "POST",
        data: JSON.stringify(formJson),
        contentType: 'application/json',
        processData: false,
        success: function (response) {
          if( _type == 'hot-number' )
          {
            $('[name="combination"][data-id="'+ data_id +'"]').replaceWith('<span class="comb-text" data-id="'+ data_id +'" data-type="bet-limit">'+ comb +'</span>');
          }
          $('[name="salesLimit"][data-id="'+ data_id +'"]').replaceWith('<span class="limit-text" data-id="'+ data_id +'" data-type="bet-limit">'+ val +'</span>');
          $('nav.layout-navbar').append(response);
          setTimeout(function () {
            $('.flash-message .btn-close').click();
          }, 2800);
        },
        error: function (response) {
          console.log(response)
        }
      });

    });
  }

  $('body').on('change','#drawcategory', function() {
    var val = this.value;
    $('input[name="combination"]').val('');
    $('input[name="combination"]').focus();

    drawcategoryMax(val);
  });

  function drawcategoryMax(val)
  {
    var max = val.charAt(val.length-1);

    if( max == 'D')
      max = val.charAt(0);
    
    $('input[name="combination"]').attr('maxlength', max);
  }

  if ($.fn.dataTable !== undefined) {
    $.fn.dataTable.ext.errMode = 'none';
  }

  $("body").on("click", ".reset-device", function (e) {
    e.preventDefault();
    
    var user_id = $(this).data("id");
    var el = $(this);

    $.ajax({
      url: '/api/gaming/resetDevice?userId='+ user_id,
      type: "GET",
      contentType: 'application/json',
      processData: false,
      success: function (response) {
        // console.log(response.status);
        if( response.status )
          el.replaceWith('<i class="bx bx-minus"></i>');
      },
      error: function (response) {
        console.log(response)
      }
    });

  });

});